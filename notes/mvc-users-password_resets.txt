PASSWORD RESETS

====
VIEW
app/views/users/passwords
  edit.html.erb
  new.html.erb
  
==========
CONTROLLER
---------------------------------------------
app/controllers/users/passwords_controller.rb
https://github.com/plataformatec/devise/blob/master/app/controllers/devise/passwords_controller.rb
  prepend_before_filter :require_no_authentication
  # Render the #edit only if coming from a reset password email link
  append_before_filter :assert_reset_token_passed, only: :edit
  # GET /resource/password/new
  def new
  # POST /resource/password
  def create
  # GET /resource/password/edit?reset_password_token=abcdef
  def edit
  # PUT /resource/password
  def update
  protected
    def after_resetting_password_path_for(resource)
    # The path used after sending reset password instructions
    def after_sending_reset_password_instructions_path_for(resource_name)
    # Check if a reset_password_token is provided in the request
    def assert_reset_token_passed
    # Check if proper Lockable module methods are present & unlock strategy
    # allows to unlock resource on password reset
    def unlockable?(resource)
    def translation_scope

===
NEW
----------------------------------------
http://localhost:3000/users/password/new
rake routes
       new_user_password GET    /users/password/new(.:format)     users/passwords#new
--------------------------------------
app/views/users/passwords/new.html.erb
--------------------------------------------------------------------------------------------------
https://github.com/plataformatec/devise/blob/master/app/controllers/devise/passwords_controller.rb
  # GET /resource/password/new
  def new
    self.resource = resource_class.new
  end
  
======
CREATE
rake routes
           user_password POST   /users/password(.:format)         users/passwords#create
--------------------------------------------------------------------------------------------------
https://github.com/plataformatec/devise/blob/master/app/controllers/devise/passwords_controller.rb
  # POST /resource/password
  def create
    self.resource = resource_class.send_reset_password_instructions(resource_params)
    yield resource if block_given?

    if successfully_sent?(resource)
      respond_with({}, location: after_sending_reset_password_instructions_path_for(resource_name))
    else
      respond_with(resource)
    end
  end
		  
====
EDIT
rake routes
      edit_user_password GET    /users/password/edit(.:format)    users/passwords#edit
---------------------------------------
app/views/users/passwords/edit.html.erb
--------------------------------------------------------------------------------------------------
https://github.com/plataformatec/devise/blob/master/app/controllers/devise/passwords_controller.rb
  # GET /resource/password/edit?reset_password_token=abcdef
  def edit
    self.resource = resource_class.new
    set_minimum_password_length
    resource.reset_password_token = params[:reset_password_token]
  end

======
UPDATE
rake routes
                         PATCH  /users/password(.:format)         users/passwords#update
                         PUT    /users/password(.:format)         users/passwords#update
--------------------------------------------------------------------------------------------------
https://github.com/plataformatec/devise/blob/master/app/controllers/devise/passwords_controller.rb
  # PUT /resource/password
  def update
    self.resource = resource_class.reset_password_by_token(resource_params)
    yield resource if block_given?

    if resource.errors.empty?
      resource.unlock_access! if unlockable?(resource)
      if Devise.sign_in_after_reset_password
        flash_message = resource.active_for_authentication? ? :updated : :updated_not_active
        set_flash_message(:notice, flash_message) if is_flashing_format?
        sign_in(resource_name, resource)
        respond_with resource, location: after_resetting_password_path_for(resource)
      else
        set_flash_message(:notice, :updated_not_active) if is_flashing_format?
        respond_with resource, location: new_session_path(resource_name)
      end
    else
      respond_with resource
    end
  end

================
config/routes.rb
Rails.application.routes.draw do
  devise_for :users, controllers: { passwords: 'users/passwords' }